---
description: 
globs: 
alwaysApply: true
---
# 项目结构规则

## 目录结构概览

本项目采用模块化、分层次的目录结构，遵循Vue生态系统最佳实践，同时支持H5和PC端开发。以下是主要目录及其用途说明：

```
src/
├── apis/                # API接口层
│   ├── modules/         # 按业务模块组织的API集合
│   ├── types/           # API相关类型定义
│   └── index.ts         # API统一导出入口
├── assets/              # 静态资源目录
│   └── icons/           # 图标资源（包括SVG图标）
├── components/          # 全局公共组件
│   ├── SvgIcon/         # SVG图标组件
│   ├── InconFent/       # Iconfront图标组件
│   └── ThemeSwitch/     # 主题切换组件
├── hooks/               # 自定义Hooks
│   ├── useNProgress.ts  # 进度条Hook
│   └── useThemeTransition.ts # 主题切换动画Hook
├── router/              # 路由配置
│   ├── home/            # 首页路由模块
│   ├── login/           # 登录路由模块
│   └── index.ts         # 路由主文件及配置
├── stores/              # Pinia状态管理
│   ├── theme.ts         # 主题状态
│   ├── token.ts         # Token管理
│   ├── user.ts          # 用户信息
│   └── login.ts         # 登录状态
├── styles/              # 全局样式
│   ├── themes/          # 主题相关样式
│   ├── transitions/     # 过渡动画样式
│   └── mixins/          # 样式混入
├── types/               # 全局类型定义
├── utils/               # 工具函数
│   ├── http/            # HTTP请求封装
│   ├── device/          # 设备信息相关
│   ├── encrypt/         # 加密相关工具
│   └── index.ts         # 工具函数统一导出
├── views/               # 页面组件
│   ├── login/           # 登录页面
│   ├── home/            # 首页
│   ├── settings/        # 设置页面
│   └── error/           # 错误页面
├── App.vue              # 应用根组件
└── main.ts              # 应用入口文件
```

## 目录规范及使用指南

### 1. APIs目录 (`src/apis/`)

负责所有与后端API交互的逻辑，采用模块化组织。

#### 使用规范：
- **模块化组织**：在`modules/`目录下按业务模块创建对应文件，如`user.ts`、`product.ts`等
- **类型定义**：在`types/`目录下定义API请求和响应的接口类型
- **统一导出**：通过`index.ts`导出所有API，方便统一引用

#### 示例：
```typescript
// 1. 在modules目录创建API模块
// src/apis/modules/user.ts
import axiosInstance from "@/utils/http";
import type { RequestData } from "../types/common";

interface LoginParams {
  username: string;
  password: string;
}

export const login = (params: LoginParams) => {
  const requestData: RequestData<LoginParams> = {
    parameter: params
  };
  return axiosInstance.post("/api/login", requestData);
};

// 2. 在index.ts中统一导出
// src/apis/index.ts
export * as userApi from "./modules/user";
export * as scriptApi from "./modules/script";
```

### 2. 组件目录 (`src/components/`)

存放全局通用组件，每个组件有自己独立的目录。

#### 使用规范：
- 组件目录采用PascalCase命名方式(如`SvgIcon/`)
- 每个组件目录包含组件本身和相关资源
- 组件入口文件命名为`index.vue`
- 复杂组件可包含子组件，放在组件目录下的`components/`子目录中

#### 示例：
```
components/
└── ThemeSwitch/
    ├── index.vue         # 组件入口
    ├── types.ts          # 组件类型定义
    └── components/       # 子组件目录
        └── ThemeOption.vue
```

### 3. Hooks目录 (`src/hooks/`)

存放可复用的组合式函数(Composition API)，提高代码复用性。

#### 使用规范：
- 文件名以`use`前缀开头，采用camelCase命名法
- 每个Hook只负责单一功能，保持功能纯粹
- 需要提供完善的类型定义

#### 示例：
```typescript
// src/hooks/useThemeTransition.ts
import { ref } from 'vue';

export function useThemeTransition() {
  const isTransitioning = ref(false);
  
  const handleThemeChange = (theme: string, element?: HTMLElement, options?: object) => {
    // 实现主题切换动画逻辑
  };
  
  return {
    isTransitioning,
    handleThemeChange
  };
}
```

### 4. 路由目录 (`src/router/`)

负责应用的路由配置，采用模块化管理。

#### 使用规范：
- 按功能模块拆分路由配置，放在相应子目录
- 在`index.ts`中整合所有路由模块并导出路由实例
- 可配置路由守卫处理权限控制等逻辑

#### 示例：
```typescript
// src/router/index.ts
import { createRouter, createWebHashHistory } from 'vue-router';
import homeRoutes from './home';
import loginRoutes from './login';

const router = createRouter({
  history: createWebHashHistory(),
  routes: [
    ...homeRoutes,
    ...loginRoutes,
    {
      path: '/:pathMatch(.*)*',
      redirect: '/error/404'
    }
  ]
});

// 路由守卫
router.beforeEach((to, from, next) => {
  // 权限控制逻辑
});

export default router;
```

### 5. 状态管理目录 (`src/stores/`)

使用Pinia进行状态管理，按功能模块拆分Store。

#### 使用规范：
- 每个功能模块创建独立的Store文件
- 使用`defineStore`创建Store，命名采用`use[Name]Store`格式
- 合理使用Pinia的持久化插件保存需要持久化的状态

#### 示例：
```typescript
// src/stores/theme.ts
import { defineStore } from 'pinia';

export const useThemeStore = defineStore('theme', {
  state: () => ({
    currentTheme: 'light',
    isDarkMode: false
  }),
  
  actions: {
    setTheme(theme: string) {
      this.currentTheme = theme;
    },
    
    toggleDarkMode() {
      this.isDarkMode = !this.isDarkMode;
    }
  },
  
  persist: true // 启用持久化
});
```

### 6. 样式目录 (`src/styles/`)

管理全局样式、主题系统和样式工具。

#### 使用规范：
- `themes/`目录下定义主题变量和主题相关样式
- `transitions/`目录存放动画过渡效果
- `mixins/`目录包含样式混入和工具函数
- 推荐使用SCSS作为CSS预处理器

### 7. 工具函数目录 (`src/utils/`)

存放各种工具函数和服务，按功能分类组织。

#### 使用规范：
- 按功能领域划分子目录，如`http/`、`device/`、`encrypt/`等
- 纯工具函数文件采用功能命名，如`format.ts`、`validate.ts`等
- 通过`index.ts`统一导出常用工具函数

### 8. 页面组件目录 (`src/views/`)

存放应用的页面级组件，按功能模块组织。

#### 使用规范：
- 目录结构应与路由结构保持一致
- 页面组件文件采用`index.vue`命名
- 页面私有组件放在对应页面目录下的`components/`子目录
- 页面私有类型定义放在对应页面目录下的`types.ts`文件

#### 示例：
```
views/
└── login/
    ├── index.vue            # 登录页面组件
    ├── types.ts             # 类型定义
    └── components/          # 登录页私有组件
        ├── LoginForm.vue
        └── LoginBanner.vue
```

## 命名规范

- **目录命名**：
  - 全局组件目录使用PascalCase (如`ThemeSwitch/`)
  - 其他目录使用kebab-case (如`api-service/`)

- **文件命名**：
  - Vue组件文件使用PascalCase (如`LoginForm.vue`)
  - TypeScript/JavaScript工具类文件使用camelCase (如`httpService.ts`)
  - 样式文件使用kebab-case (如`theme-dark.scss`)

- **组件命名**：
  - 组件名使用PascalCase (如`ThemeSwitch`)
  - 私有组件可添加所属模块前缀 (如`LoginForm`)

- **变量命名**：
  - 普通变量、函数使用camelCase
  - 常量使用UPPER_SNAKE_CASE
  - 类型、接口使用PascalCase

## 导入路径规范

项目使用路径别名简化导入路径：

- `@` 指向 `src` 目录
- `@c` 指向 `src/components` 目录
- `@u` 指向 `src/utils` 目录

推荐使用别名进行导入，如：
```typescript
import ThemeSwitch from '@/components/ThemeSwitch/index.vue';
import { useHttpRequest } from '@/utils/http';
```
```


