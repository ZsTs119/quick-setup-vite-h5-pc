---
description: 
globs: 
alwaysApply: true
---
# 代码注释规则

## 概述

本项目采用严格的代码注释规范，以提高代码的可读性、可维护性和可协作性。良好的注释能帮助团队成员快速理解代码意图、功能和使用方法，减少沟通成本和维护难度。

## 注释格式规范

### 1. 函数和方法注释

使用JSDoc风格的多行注释，包含以下要素：

```typescript
/**
 * 函数的简要描述
 * @param {Type} paramName - 参数的描述
 * @param {Type} [optionalParam] - 可选参数的描述
 * @returns {ReturnType} 返回值的描述
 * @throws {ErrorType} 可能抛出的异常说明
 * @example
 * // 使用示例
 * const result = functionName(param);
 */
function functionName(paramName, optionalParam) {
  // 函数实现
}
```

### 2. 类和接口注释

```typescript
/**
 * 类的描述
 * @class
 * @implements {Interface}
 */
class ClassName implements Interface {
  /**
   * 构造函数描述
   * @param {Type} param - 参数描述
   */
  constructor(param) {
    // 实现
  }
}

/**
 * 接口的描述
 * @interface
 */
interface InterfaceName {
  /** 属性描述 */
  propertyName: Type;
}
```

### 3. 变量和常量注释

```typescript
/** 变量描述 */
const variableName: Type = value;

// 简短说明
let simpleVar = value;
```

### 4. 代码块注释

```typescript
// 对复杂逻辑的分步骤说明
// 步骤1: 处理输入数据
const processedData = rawData.map(item => {
  // 逻辑处理
});

// 步骤2: 过滤无效数据
const validData = processedData.filter(item => {
  // 过滤逻辑
});
```

## 需要注释的场景

以下场景**必须**添加注释：

1. **公共API和导出函数**：所有对外暴露的函数、类、常量等
2. **复杂算法或业务逻辑**：非直观的代码逻辑需要详细解释
3. **特殊处理或边界条件**：异常处理、边界条件、特殊情况的处理
4. **性能优化措施**：为提高性能而采取的特殊处理
5. **非常规解决方案**：使用非常规手段解决问题时需要解释原因
6. **兼容性处理**：针对特定浏览器、设备或环境的适配代码
7. **TODO和FIXME标记**：标记待完成或需修复的内容

以下场景**不需要**注释：

1. 简单明了的代码
2. 变量名或函数名已能清晰表达意图的代码
3. 用于临时调试的代码（应在提交前删除）

## 注释内容要点

好的注释应当包含以下方面的信息：

1. **目的说明**：代码的用途和解决的问题
2. **参数解释**：各个参数的含义、类型和约束条件
3. **返回值说明**：返回值的类型和含义
4. **异常情况**：可能抛出的异常及其原因
5. **使用示例**：复杂API的使用示例
6. **依赖关系**：与其他模块的依赖和交互
7. **算法说明**：复杂算法的工作原理
8. **副作用**：可能产生的副作用，如状态变化、网络请求等

## 注释更新

代码更改时，必须同步更新相关注释，确保注释与代码保持一致。过时或错误的注释比没有注释更有害。

## 注释示例

### 示例1：HTTP请求封装

```typescript
/**
 * 创建流式请求，用于处理服务器发送的数据流
 * @param {string} url - 请求的API路径
 * @param {Record<string, any>} params - 请求参数
 * @param {Function} onChunk - 接收数据块的回调函数
 * @param {Function} [onComplete] - 请求完成的回调函数
 * @param {Function} [onError] - 错误处理回调函数
 * @param {AbortSignal} [signal] - 用于取消请求的信号
 * @returns {Promise<void>} 无返回值的Promise
 * @example
 * // 发起流式请求
 * streamRequest(
 *   '/api/chat',
 *   { message: '你好' },
 *   chunk => console.log(chunk),
 *   () => console.log('完成'),
 *   err => console.error(err),
 *   abortController.signal
 * );
 */
export const streamRequest = async <T>(
  url: string,
  params: Record<string, any> = {},
  onChunk: (chunk: any) => void,
  onComplete?: () => void,
  onError?: (error: any) => void,
  signal?: AbortSignal
) => {
  // 实现逻辑
}
```

### 示例2：工具函数

```typescript
/**
 * 生成API请求签名
 * 签名生成步骤：
 * 1. 将对象的所有属性转换为字符串数组
 * 2. 按照字典序排序
 * 3. 使用&符号连接所有键值对
 * 4. 对结果字符串进行MD5加密
 * 
 * @param {Object} params - 需要签名的参数对象
 * @returns {string} 生成的MD5签名
 * @throws {Error} 当params不是有效对象时可能抛出错误
 */
export function generateSignature(params: object): string {
  // 实现逻辑
}
```

### 示例3：组件Props

```typescript
/**
 * 主题切换组件
 * 提供一个下拉菜单用于切换应用的主题
 */
export default defineComponent({
  name: 'ThemeSwitch',
  
  props: {
    /** 是否显示图标，默认为true */
    showIcon: {
      type: Boolean,
      default: true
    },
    
    /** 
     * 自定义主题列表
     * 每个主题项应包含name和label属性
     */
    themes: {
      type: Array as PropType<Array<{name: string, label: string}>>,
      default: () => []
    }
  },
  
  // 组件实现
})
```

### 示例4：复杂业务逻辑

```typescript
// 处理用户登录流程
async function handleLogin() {
  // 步骤1: 表单验证
  const valid = await validateForm();
  if (!valid) return;
  
  // 步骤2: 加密密码 (不直接传输明文密码)
  const encryptedPassword = encryptPassword(password.value);
  
  // 步骤3: 发送登录请求
  try {
    const result = await userApi.login({
      username: username.value,
      password: encryptedPassword
    });
    
    // 步骤4: 保存用户信息和Token
    userStore.setUserInfo(result);
    tokenStore.setToken(result.token);
    
    // 步骤5: 获取用户权限并跳转
    await getPermissions();
    router.push({ path: redirectPath.value || '/' });
  } catch (error) {
    // 错误处理: 区分不同类型的登录失败
    if (error.code === 'INVALID_CREDENTIALS') {
      // 用户名或密码错误
      showError('用户名或密码错误');
    } else if (error.code === 'ACCOUNT_LOCKED') {
      // 账号被锁定
      showError('账号已被锁定，请联系管理员');
    } else {
      // 其他错误
      showError('登录失败，请稍后重试');
    }
  }
}
```

## 注释检查与维护

1. 代码审查过程中，应检查注释的完整性和准确性
2. 定期检查和更新过时的注释
3. 使用ESLint等工具强制执行注释规范
4. 为复杂的业务逻辑创建单独的文档，在代码中引用文档

## 避免的注释方式

1. 避免无意义的注释，例如仅重复代码内容
2. 避免使用大量的行内注释，打断代码阅读流程
3. 避免包含错误信息或误导性内容的注释
4. 避免使用不规范或不统一的注释风格

